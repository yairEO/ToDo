{"version":3,"sources":["router.js"],"names":[],"mappingsfile":"all.js","sourcesContent":["(function(exports) {\r\n    var Router = {\r\n        routes: [],\r\n        mode: null,\r\n        root: '/',\r\n        config: function(options) {\r\n            this.mode = options && options.mode && options.mode == 'history'\r\n                        && !!(history.pushState) ? 'history' : 'hash';\r\n            this.root = options && options.root ? '/' + this.clearSlashes(options.root) + '/' : '/';\r\n            return this;\r\n        },\r\n        getFragment: function() {\r\n            var fragment = '';\r\n            if(this.mode === 'history') {\r\n                fragment = this.clearSlashes(decodeURI(location.pathname + location.search));\r\n                fragment = fragment.replace(/\\?(.*)$/, '');\r\n                fragment = this.root != '/' ? fragment.replace(this.root, '') : fragment;\r\n            } else {\r\n                var match = window.location.href.match(/#(.*)$/);\r\n                fragment = match ? match[1] : '';\r\n            }\r\n            return this.clearSlashes(fragment);\r\n        },\r\n        clearSlashes: function(path) {\r\n            return path.toString().replace(/\\/$/, '').replace(/^\\//, '');\r\n        },\r\n        add: function(re, handler) {\r\n            if(typeof re == 'function') {\r\n                handler = re;\r\n                re = '';\r\n            }\r\n            this.routes.push({ re: re, handler: handler});\r\n            return this;\r\n        },\r\n        remove: function(param) {\r\n            for(var i=0, r; i<this.routes.length, r = this.routes[i]; i++) {\r\n                if(r.handler === param || r.re.toString() === param.toString()) {\r\n                    this.routes.splice(i, 1);\r\n                    return this;\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        flush: function() {\r\n            this.routes = [];\r\n            this.mode = null;\r\n            this.root = '/';\r\n            return this;\r\n        },\r\n        check: function(hash) {\r\n            var reg, keys, match, routeParams, i;\r\n            for (i = 0, max = this.routes.length; i < max; i++) {\r\n                routeParams = {}\r\n                keys = this.routes[i].path.match(/:([^\\/]+)/g);\r\n                match = hash.match(new RegExp(this.routes[i].path.replace(/:([^\\/]+)/g, \"([^\\/]*)\")));\r\n                if (match) {\r\n                    match.shift();\r\n                    match.forEach(function(value, i) {\r\n                        routeParams[keys[i].replace(\":\", \"\")] = value;\r\n                    });\r\n                    this.routes[i].handler.call({}, routeParams);\r\n                    return this;\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        listen: function() {\r\n            var self = this;\r\n            var current = self.getFragment();\r\n            var fn = function() {\r\n                if(current !== self.getFragment()) {\r\n                    current = self.getFragment();\r\n                    self.check(current);\r\n                }\r\n            }\r\n            clearInterval(this.interval);\r\n            this.interval = setInterval(fn, 50);\r\n            return this;\r\n        },\r\n        navigate: function(path) {\r\n            path = path ? path : '';\r\n            if(this.mode === 'history') {\r\n                history.pushState(null, null, this.root + this.clearSlashes(path));\r\n            } else {\r\n                window.location.href.match(/#(.*)$/);\r\n                window.location.href = window.location.href.replace(/#(.*)$/, '') + '#' + path;\r\n            }\r\n            return this;\r\n        }\r\n    }\r\n\r\n    // configuration\r\n    Router.config({ mode: 'history'});\r\n\r\n    // returning the user to the initial state\r\n    //Router.navigate();\r\n\r\n    // forwarding\r\n    // Router.navigate('/about');\r\n\r\n    exports.Router = Router;\r\n}(typeof exports === \"object\" && exports || this));\r\n"],"sourceRoot":"/source/"}